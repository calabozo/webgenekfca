// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.uc3m.tsc.gene;

import es.uc3m.tsc.gene.DataMatrix;
import es.uc3m.tsc.gene.DataMatrixDataOnDemand;
import es.uc3m.tsc.gene.DataTypeEnum;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect DataMatrixDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DataMatrixDataOnDemand: @Component;
    
    private Random DataMatrixDataOnDemand.rnd = new SecureRandom();
    
    private List<DataMatrix> DataMatrixDataOnDemand.data;
    
    public DataMatrix DataMatrixDataOnDemand.getNewTransientDataMatrix(int index) {
        DataMatrix obj = new DataMatrix();
        setColNames(obj, index);
        setDescription(obj, index);
        setMicroArrayType(obj, index);
        setName(obj, index);
        setRawData(obj, index);
        setRowNames(obj, index);
        return obj;
    }
    
    public void DataMatrixDataOnDemand.setColNames(DataMatrix obj, int index) {
        String[] colNames = { "Y", "N" };
        obj.setColNames(colNames);
    }
    
    public void DataMatrixDataOnDemand.setDescription(DataMatrix obj, int index) {
        String description = "description_" + index;
        if (description.length() > 2000) {
            description = description.substring(0, 2000);
        }
        obj.setDescription(description);
    }
    
    public void DataMatrixDataOnDemand.setMicroArrayType(DataMatrix obj, int index) {
        DataTypeEnum microArrayType = DataTypeEnum.class.getEnumConstants()[0];
        obj.setMicroArrayType(microArrayType);
    }
    
    public void DataMatrixDataOnDemand.setName(DataMatrix obj, int index) {
        String name = "name_" + index;
        obj.setName(name);
    }
    
    public void DataMatrixDataOnDemand.setRowNames(DataMatrix obj, int index) {
        String[] rowNames = { "Y", "N" };
        obj.setRowNames(rowNames);
    }
    
    public DataMatrix DataMatrixDataOnDemand.getSpecificDataMatrix(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        DataMatrix obj = data.get(index);
        Long id = obj.getId();
        return DataMatrix.findDataMatrix(id);
    }
    
    public DataMatrix DataMatrixDataOnDemand.getRandomDataMatrix() {
        init();
        DataMatrix obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return DataMatrix.findDataMatrix(id);
    }
    
    public boolean DataMatrixDataOnDemand.modifyDataMatrix(DataMatrix obj) {
        return false;
    }
    
    public void DataMatrixDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = DataMatrix.findDataMatrixEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'DataMatrix' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<DataMatrix>();
        for (int i = 0; i < 10; i++) {
            DataMatrix obj = getNewTransientDataMatrix(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
