// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.uc3m.tsc.gene;

import es.uc3m.tsc.gene.DataMatrixDataOnDemand;
import es.uc3m.tsc.gene.Preprocessor;
import es.uc3m.tsc.gene.PreprocessorDataOnDemand;
import es.uc3m.tsc.gene.PreprocessorEnum;
import es.uc3m.tsc.general.Constants.GeneExpType;
import es.uc3m.tsc.kfca.explore.KFCAResultsDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect PreprocessorDataOnDemand_Roo_DataOnDemand {
    
    declare @type: PreprocessorDataOnDemand: @Component;
    
    private Random PreprocessorDataOnDemand.rnd = new SecureRandom();
    
    private List<Preprocessor> PreprocessorDataOnDemand.data;
    
    @Autowired
    DataMatrixDataOnDemand PreprocessorDataOnDemand.dataMatrixDataOnDemand;
    
    @Autowired
    KFCAResultsDataOnDemand PreprocessorDataOnDemand.kFCAResultsDataOnDemand;
    
    public Preprocessor PreprocessorDataOnDemand.getNewTransientPreprocessor(int index) {
        Preprocessor obj = new Preprocessor();
        setCreationDate(obj, index);
        setGeneExpressionType(obj, index);
        setGroupId(obj, index);
        setGroupMatrix(obj, index);
        setGroupName(obj, index);
        setMaxPhiToExplore(obj, index);
        setName(obj, index);
        setPreprocessorType(obj, index);
        setRowNames(obj, index);
        return obj;
    }
    
    public void PreprocessorDataOnDemand.setCreationDate(Preprocessor obj, int index) {
        Date creationDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreationDate(creationDate);
    }
    
    public void PreprocessorDataOnDemand.setGeneExpressionType(Preprocessor obj, int index) {
        GeneExpType geneExpressionType = GeneExpType.class.getEnumConstants()[0];
        obj.setGeneExpressionType(geneExpressionType);
    }
    
    public void PreprocessorDataOnDemand.setGroupName(Preprocessor obj, int index) {
        String[] groupName = { "Y", "N" };
        obj.setGroupName(groupName);
    }
    
    public void PreprocessorDataOnDemand.setMaxPhiToExplore(Preprocessor obj, int index) {
        Long maxPhiToExplore = new Integer(index).longValue();
        obj.setMaxPhiToExplore(maxPhiToExplore);
    }
    
    public void PreprocessorDataOnDemand.setName(Preprocessor obj, int index) {
        String name = "name_" + index;
        obj.setName(name);
    }
    
    public void PreprocessorDataOnDemand.setPreprocessorType(Preprocessor obj, int index) {
        PreprocessorEnum preprocessorType = PreprocessorEnum.class.getEnumConstants()[0];
        obj.setPreprocessorType(preprocessorType);
    }
    
    public void PreprocessorDataOnDemand.setRowNames(Preprocessor obj, int index) {
        String[] rowNames = { "Y", "N" };
        obj.setRowNames(rowNames);
    }
    
    public Preprocessor PreprocessorDataOnDemand.getSpecificPreprocessor(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Preprocessor obj = data.get(index);
        Long id = obj.getId();
        return Preprocessor.findPreprocessor(id);
    }
    
    public Preprocessor PreprocessorDataOnDemand.getRandomPreprocessor() {
        init();
        Preprocessor obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Preprocessor.findPreprocessor(id);
    }
    
    public boolean PreprocessorDataOnDemand.modifyPreprocessor(Preprocessor obj) {
        return false;
    }
    
    public void PreprocessorDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Preprocessor.findPreprocessorEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Preprocessor' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Preprocessor>();
        for (int i = 0; i < 10; i++) {
            Preprocessor obj = getNewTransientPreprocessor(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
