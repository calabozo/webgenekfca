// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.uc3m.tsc.kfca.explore;

import es.uc3m.tsc.gene.DataTypeEnum;
import es.uc3m.tsc.kfca.explore.KFCAResults;
import es.uc3m.tsc.kfca.explore.KFCAResultsDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect KFCAResultsDataOnDemand_Roo_DataOnDemand {
    
    declare @type: KFCAResultsDataOnDemand: @Component;
    
    private Random KFCAResultsDataOnDemand.rnd = new SecureRandom();
    
    private List<KFCAResults> KFCAResultsDataOnDemand.data;
    
    public KFCAResults KFCAResultsDataOnDemand.getNewTransientKFCAResults(int index) {
        KFCAResults obj = new KFCAResults();
        setColNames(obj, index);
        setExplorationType(obj, index);
        setMaxPlusNumConcepts(obj, index);
        setMicroArrayType(obj, index);
        setMinPlusNumConcepts(obj, index);
        setPreprocessorId(obj, index);
        setProcessedMatrix(obj, index);
        setRowNames(obj, index);
        setStartDate(obj, index);
        setStopDate(obj, index);
        return obj;
    }
    
    public void KFCAResultsDataOnDemand.setColNames(KFCAResults obj, int index) {
        String[] colNames = { "Y", "N" };
        obj.setColNames(colNames);
    }
    
    public void KFCAResultsDataOnDemand.setExplorationType(KFCAResults obj, int index) {
        int explorationType = index;
        obj.setExplorationType(explorationType);
    }
    
    public void KFCAResultsDataOnDemand.setMicroArrayType(KFCAResults obj, int index) {
        DataTypeEnum microArrayType = DataTypeEnum.class.getEnumConstants()[0];
        obj.setMicroArrayType(microArrayType);
    }
    
    public void KFCAResultsDataOnDemand.setPreprocessorId(KFCAResults obj, int index) {
        Long preprocessorId = new Integer(index).longValue();
        obj.setPreprocessorId(preprocessorId);
    }
    
    public void KFCAResultsDataOnDemand.setRowNames(KFCAResults obj, int index) {
        String[] rowNames = { "Y", "N" };
        obj.setRowNames(rowNames);
    }
    
    public void KFCAResultsDataOnDemand.setStartDate(KFCAResults obj, int index) {
        Date startDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setStartDate(startDate);
    }
    
    public void KFCAResultsDataOnDemand.setStopDate(KFCAResults obj, int index) {
        Date stopDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setStopDate(stopDate);
    }
    
    public KFCAResults KFCAResultsDataOnDemand.getSpecificKFCAResults(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        KFCAResults obj = data.get(index);
        Long id = obj.getId();
        return KFCAResults.findKFCAResults(id);
    }
    
    public KFCAResults KFCAResultsDataOnDemand.getRandomKFCAResults() {
        init();
        KFCAResults obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return KFCAResults.findKFCAResults(id);
    }
    
    public boolean KFCAResultsDataOnDemand.modifyKFCAResults(KFCAResults obj) {
        return false;
    }
    
    public void KFCAResultsDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = KFCAResults.findKFCAResultsEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'KFCAResults' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<KFCAResults>();
        for (int i = 0; i < 10; i++) {
            KFCAResults obj = getNewTransientKFCAResults(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
