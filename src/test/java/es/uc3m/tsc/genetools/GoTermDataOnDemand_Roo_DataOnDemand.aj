// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.uc3m.tsc.genetools;

import es.uc3m.tsc.genetools.GoTerm;
import es.uc3m.tsc.genetools.GoTermDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect GoTermDataOnDemand_Roo_DataOnDemand {
    
    declare @type: GoTermDataOnDemand: @Component;
    
    private Random GoTermDataOnDemand.rnd = new SecureRandom();
    
    private List<GoTerm> GoTermDataOnDemand.data;
    
    public GoTerm GoTermDataOnDemand.getNewTransientGoTerm(int index) {
        GoTerm obj = new GoTerm();
        setDescription(obj, index);
        setGoid(obj, index);
        setMicroArrayType(obj, index);
        setNumGenes(obj, index);
        setNumProbesets(obj, index);
        setOntology(obj, index);
        setStrGeneSymbols(obj, index);
        setStrProbesets(obj, index);
        return obj;
    }
    
    public void GoTermDataOnDemand.setDescription(GoTerm obj, int index) {
        String description = "description_" + index;
        obj.setDescription(description);
    }
    
    public void GoTermDataOnDemand.setGoid(GoTerm obj, int index) {
        String goid = "goid_" + index;
        obj.setGoid(goid);
    }
    
    public void GoTermDataOnDemand.setMicroArrayType(GoTerm obj, int index) {
        Integer microArrayType = new Integer(index);
        obj.setMicroArrayType(microArrayType);
    }
    
    public void GoTermDataOnDemand.setNumGenes(GoTerm obj, int index) {
        Integer numGenes = new Integer(index);
        obj.setNumGenes(numGenes);
    }
    
    public void GoTermDataOnDemand.setNumProbesets(GoTerm obj, int index) {
        Integer numProbesets = new Integer(index);
        obj.setNumProbesets(numProbesets);
    }
    
    public void GoTermDataOnDemand.setOntology(GoTerm obj, int index) {
        String ontology = "o_" + index;
        if (ontology.length() > 3) {
            ontology = ontology.substring(0, 3);
        }
        obj.setOntology(ontology);
    }
    
    public void GoTermDataOnDemand.setStrGeneSymbols(GoTerm obj, int index) {
        String strGeneSymbols = "strGeneSymbols_" + index;
        obj.setStrGeneSymbols(strGeneSymbols);
    }
    
    public void GoTermDataOnDemand.setStrProbesets(GoTerm obj, int index) {
        String strProbesets = "strProbesets_" + index;
        obj.setStrProbesets(strProbesets);
    }
    
    public GoTerm GoTermDataOnDemand.getSpecificGoTerm(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        GoTerm obj = data.get(index);
        Long id = obj.getId();
        return GoTerm.findGoTerm(id);
    }
    
    public GoTerm GoTermDataOnDemand.getRandomGoTerm() {
        init();
        GoTerm obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return GoTerm.findGoTerm(id);
    }
    
    public boolean GoTermDataOnDemand.modifyGoTerm(GoTerm obj) {
        return false;
    }
    
    public void GoTermDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = GoTerm.findGoTermEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'GoTerm' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<GoTerm>();
        for (int i = 0; i < 10; i++) {
            GoTerm obj = getNewTransientGoTerm(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
