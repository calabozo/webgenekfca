// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.uc3m.tsc.genetools;

import es.uc3m.tsc.genetools.GeneDescription;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect GeneDescription_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager GeneDescription.entityManager;
    
    public static final List<String> GeneDescription.fieldNames4OrderClauseFilter = java.util.Arrays.asList("COL", "SEP", "EMPTY", "SEP_GO1", "SEP_GO2", "microArrayType", "probeSetID", "annotationDate", "sequenceType", "sequenceSource", "transcriptID", "description", "representativePublicID", "archivalUnigeneCluster", "uniGeneID", "genomeVersion", "alignments", "geneTitle", "geneSymbol", "chromosomalLocation", "uniGeneClusterType", "ensembl", "entrezGene", "swissProt", "EC", "OMIM", "flybase", "agiName", "strAgiName", "MGIName", "RGDName", "SGDAccesionNumber", "goBP", "strGoBP", "goCC", "strGoCC", "goMF", "strGoMF", "pathway");
    
    public static final EntityManager GeneDescription.entityManager() {
        EntityManager em = new GeneDescription().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long GeneDescription.countGeneDescriptions() {
        return entityManager().createQuery("SELECT COUNT(o) FROM GeneDescription o", Long.class).getSingleResult();
    }
    
    public static List<GeneDescription> GeneDescription.findAllGeneDescriptions() {
        return entityManager().createQuery("SELECT o FROM GeneDescription o", GeneDescription.class).getResultList();
    }
    
    public static List<GeneDescription> GeneDescription.findAllGeneDescriptions(String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM GeneDescription o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, GeneDescription.class).getResultList();
    }
    
    public static GeneDescription GeneDescription.findGeneDescription(Long id) {
        if (id == null) return null;
        return entityManager().find(GeneDescription.class, id);
    }
    
    public static List<GeneDescription> GeneDescription.findGeneDescriptionEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM GeneDescription o", GeneDescription.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    public static List<GeneDescription> GeneDescription.findGeneDescriptionEntries(int firstResult, int maxResults, String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM GeneDescription o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, GeneDescription.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void GeneDescription.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void GeneDescription.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            GeneDescription attached = GeneDescription.findGeneDescription(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void GeneDescription.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void GeneDescription.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public GeneDescription GeneDescription.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        GeneDescription merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
